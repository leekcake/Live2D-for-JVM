/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI */

#ifndef _Included_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
#define _Included_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getOverrideFloatBlendFunction
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getOverrideFloatBlendFunction
  (JNIEnv *, jclass);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAdditiveFloatBlendFunction
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAdditiveFloatBlendFunction
  (JNIEnv *, jclass);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    allocatePhysicsOptions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_allocatePhysicsOptions
  (JNIEnv *, jclass);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAnimationDuration
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAnimationDuration
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAnimationIsLoop
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAnimationIsLoop
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    allocateAnimationState
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_allocateAnimationState
  (JNIEnv *, jclass);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAnimationStateTime
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAnimationStateTime
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    allocateUserDataSink
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_allocateUserDataSink
  (JNIEnv *, jclass);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getUserDataSinkHashId
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getUserDataSinkHashId
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getUserDataSinkValue
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getUserDataSinkValue
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    allocateAnimationUserDataSink
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_allocateAnimationUserDataSink
  (JNIEnv *, jclass);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAnimationUserDataSinkTime
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAnimationUserDataSinkTime
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAnimationUserDataValue
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAnimationUserDataValue
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getGravitiyPhysicsOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getGravitiyPhysicsOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getWindPhysicsOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getWindPhysicsOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getHashTableParameterCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getHashTableParameterCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getHashTableParameterHash
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getHashTableParameterHash
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getHashTablePartCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getHashTablePartCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getHashTablePartHash
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getHashTablePartHash
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    generateHashId
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_generateHashId
  (JNIEnv *, jclass, jstring);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getSizeofModelHashTable
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getSizeofModelHashTable
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    initializeModelHashTableInPlace
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_initializeModelHashTableInPlace
  (JNIEnv *, jclass, jlong, jlong, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    findParameterIndexByHash
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_findParameterIndexByHash
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    findParameterIndexByHashFAST
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_findParameterIndexByHashFAST
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    findPartIndexByHash
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_findPartIndexByHash
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    findPartIndexByHashFAST
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_findPartIndexByHashFAST
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    findDrawableIndexByHash
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_findDrawableIndexByHash
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    doesModelUseMasks
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_doesModelUseMasks
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    initializeAnimationState
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_initializeAnimationState
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    resetAnimationState
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_resetAnimationState
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    updateAnimationState
 * Signature: (JF)V
 */
JNIEXPORT void JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_updateAnimationState
  (JNIEnv *, jclass, jlong, jfloat);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getDeserializedSizeofAnimation
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getDeserializedSizeofAnimation
  (JNIEnv *, jclass, jstring);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    deserializeAnimationInPlace
 * Signature: (Ljava/lang/String;JJ)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_deserializeAnimationInPlace
  (JNIEnv *, jclass, jstring, jlong, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    evaluateAnimationFAST
 * Signature: (JJJFJJJJ)V
 */
JNIEXPORT void JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_evaluateAnimationFAST
  (JNIEnv *, jclass, jlong, jlong, jlong, jfloat, jlong, jlong, jlong, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getDeserializedSizeofPhysics
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getDeserializedSizeofPhysics
  (JNIEnv *, jclass, jstring);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    deserializePhysicsInPlace
 * Signature: (Ljava/lang/String;JJ)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_deserializePhysicsInPlace
  (JNIEnv *, jclass, jstring, jlong, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    physicsEvaluate
 * Signature: (JJJF)V
 */
JNIEXPORT void JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_physicsEvaluate
  (JNIEnv *, jclass, jlong, jlong, jlong, jfloat);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getDeserializedSizeofUserData
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getDeserializedSizeofUserData
  (JNIEnv *, jclass, jstring);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    deserializeUserDataInPlace
 * Signature: (Ljava/lang/String;JJ)J
 */
JNIEXPORT jlong JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_deserializeUserDataInPlace
  (JNIEnv *, jclass, jstring, jlong, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getUserDataCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getUserDataCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getUserData
 * Signature: (JIJ)V
 */
JNIEXPORT void JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getUserData
  (JNIEnv *, jclass, jlong, jint, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAnimationUserDataCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAnimationUserDataCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI
 * Method:    getAnimationUserData
 * Signature: (JIJ)V
 */
JNIEXPORT void JNICALL Java_moe_leekcake_live2dforjvm_Live2DCubismFrameworkJNI_getAnimationUserData
  (JNIEnv *, jclass, jlong, jint, jlong);

#ifdef __cplusplus
}
#endif
#endif
